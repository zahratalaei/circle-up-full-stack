// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(cuid())
  username    String?         @unique
  avatar      String?
  cover       String?
  email       String?         @unique
  password    String?
  name        String?
  surname     String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  posts       Post[]
  likes       Like[]
  comments    Comment[]
  followers   Follower[]      @relation("Follower")
  following   Follower[]      @relation("Following")
  sender      FollowRequest[] @relation("Sender")
  receiver    FollowRequest[] @relation("Receiver")
  blocks      Block[]         @relation("Blocker")
  blockedBy   Block[]         @relation("Blocked")
  stories     Story[]
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User?     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String?
  likes       Like[]
  comments    Comment[]
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  likes     Like[]
}

model Follower {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User?    @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String?
  following   User?    @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String?
}

model FollowRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User?    @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String?
  receiver   User?    @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String?

  @@unique([senderId, receiverId])
}

model Block {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blocker   User?    @relation("Blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String?
  blocked   User?    @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String?

  @@unique([blockedId, blockerId])
}

model Story {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  expiredAt   DateTime
  author      User?    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String?  @unique
}
